package simfishimath

/*
File automatically generated by the ictiobus compiler. DO NOT EDIT. This was
created by invoking ictiobus with the following command:

    ictcc --clr --ir []github.com/dekarrin/fishimath/fmhooks.FMValue -l FISHIMath -v 1.0 -d /home/dekarrin/projects/ictiobus/tests/09-fishimath/fmc-eval --hooks fmhooks -S all --dev -nq /home/dekarrin/projects/ictiobus/tests/09-fishimath/fm-eval.md
*/

import (
	_ "embed"

	"github.com/dekarrin/ictiobus/grammar"
	"github.com/dekarrin/ictiobus/parse"

	"github.com/dekarrin/ictiobus/langexec/fishimath/internal/simfishimath/simfishimathtoken"
)

var (
	//go:embed parser.cff
	parserData []byte
)

// Grammar returns the grammar accepted by the generated ictiobus parser for
// FISHIMath. This grammar will also be included with with the parser itself,
// but it is included here as well for convenience.
func Grammar() grammar.CFG {
	g := grammar.CFG{}

	g.AddTerm(simfishimathtoken.TCAsterisk.ID(), simfishimathtoken.TCAsterisk)
	g.AddTerm(simfishimathtoken.TCPlusSign.ID(), simfishimathtoken.TCPlusSign)
	g.AddTerm(simfishimathtoken.TC.ID(), simfishimathtoken.TC)
	g.AddTerm(simfishimathtoken.TCSolidus.ID(), simfishimathtoken.TCSolidus)
	g.AddTerm(simfishimathtoken.TCFishhead.ID(), simfishimathtoken.TCFishhead)
	g.AddTerm(simfishimathtoken.TCFishtail.ID(), simfishimathtoken.TCFishtail)
	g.AddTerm(simfishimathtoken.TCFloat.ID(), simfishimathtoken.TCFloat)
	g.AddTerm(simfishimathtoken.TCId.ID(), simfishimathtoken.TCId)
	g.AddTerm(simfishimathtoken.TCInt.ID(), simfishimathtoken.TCInt)
	g.AddTerm(simfishimathtoken.TCShark.ID(), simfishimathtoken.TCShark)
	g.AddTerm(simfishimathtoken.TCTentacle.ID(), simfishimathtoken.TCTentacle)

	g.AddRule("FISHIMATH", []string{"STATEMENTS"})

	g.AddRule("STATEMENTS", []string{"STMT", "STATEMENTS"})
	g.AddRule("STATEMENTS", []string{"STMT"})

	g.AddRule("STMT", []string{"EXPR", "shark"})

	g.AddRule("EXPR", []string{"id", "tentacle", "EXPR"})
	g.AddRule("EXPR", []string{"SUM"})

	g.AddRule("SUM", []string{"PRODUCT", "+", "EXPR"})
	g.AddRule("SUM", []string{"PRODUCT", "-", "EXPR"})
	g.AddRule("SUM", []string{"PRODUCT"})

	g.AddRule("PRODUCT", []string{"TERM", "*", "PRODUCT"})
	g.AddRule("PRODUCT", []string{"TERM", "/", "PRODUCT"})
	g.AddRule("PRODUCT", []string{"TERM"})

	g.AddRule("TERM", []string{"fishtail", "EXPR", "fishhead"})
	g.AddRule("TERM", []string{"int"})
	g.AddRule("TERM", []string{"float"})
	g.AddRule("TERM", []string{"id"})

	return g
}

// Parser returns the generated ictiobus Parser for FISHIMath.
func Parser() parse.Parser {
	p, err := parse.DecodeBytes(parserData)
	if err != nil {
		panic("corrupted parser.cff file: " + err.Error())
	}

	return p
}
