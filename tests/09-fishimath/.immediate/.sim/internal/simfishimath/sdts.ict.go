package simfishimath

/*
File automatically generated by the ictiobus compiler. DO NOT EDIT. This was
created by invoking ictiobus with the following command:

    ictcc --clr --ir []github.com/dekarrin/fishimath/fmhooks.FMValue -l FISHIMath -v 1.0 -d /home/dekarrin/projects/ictiobus/tests/09-fishimath/fmc-eval --hooks fmhooks -S all -nq /home/dekarrin/projects/ictiobus/tests/09-fishimath/fm-eval.md
*/

import (
	"github.com/dekarrin/ictiobus"
	"github.com/dekarrin/ictiobus/trans"
)

// SDTS returns the generated ictiobus syntax-directed translation scheme for
// FISHIMath.
func SDTS() trans.SDTS {
	sdts := ictiobus.NewSDTS()

	sdtsBindTCFishimath(sdts)
	sdtsBindTCStatements(sdts)
	sdtsBindTCStmt(sdts)
	sdtsBindTCExpr(sdts)
	sdtsBindTCSum(sdts)
	sdtsBindTCProduct(sdts)
	sdtsBindTCTerm(sdts)

	return sdts
}

func sdtsBindTCFishimath(sdts trans.SDTS) {
	sdts.Bind(
		"FISHIMATH", []string{"STATEMENTS"},
		"ir",
		"identity",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelNonTerminal, Index: 0}, Name: "result"},
		},
	)
}

func sdtsBindTCStatements(sdts trans.SDTS) {
	sdts.Bind(
		"STATEMENTS", []string{"STMT", "STATEMENTS"},
		"result",
		"num_slice_prepend",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "result"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)

	sdts.Bind(
		"STATEMENTS", []string{"STMT"},
		"result",
		"num_slice_start",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)
}

func sdtsBindTCStmt(sdts trans.SDTS) {
	sdts.Bind(
		"STMT", []string{"EXPR", "shark"},
		"value",
		"identity",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)
}

func sdtsBindTCExpr(sdts trans.SDTS) {
	sdts.Bind(
		"EXPR", []string{"id", "tentacle", "EXPR"},
		"value",
		"write_var",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "$text"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 2}, Name: "value"},
		},
	)

	sdts.Bind(
		"EXPR", []string{"SUM"},
		"value",
		"identity",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)
}

func sdtsBindTCSum(sdts trans.SDTS) {
	sdts.Bind(
		"SUM", []string{"PRODUCT", "+", "EXPR"},
		"value",
		"add",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelNonTerminal, Index: 0}, Name: "value"},
			{Relation: trans.NodeRelation{Type: trans.RelNonTerminal, Index: 1}, Name: "value"},
		},
	)

	sdts.Bind(
		"SUM", []string{"PRODUCT", "-", "EXPR"},
		"value",
		"subtract",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelNonTerminal, Index: 0}, Name: "value"},
			{Relation: trans.NodeRelation{Type: trans.RelNonTerminal, Index: 1}, Name: "value"},
		},
	)

	sdts.Bind(
		"SUM", []string{"PRODUCT"},
		"value",
		"identity",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)
}

func sdtsBindTCProduct(sdts trans.SDTS) {
	sdts.Bind(
		"PRODUCT", []string{"TERM", "*", "PRODUCT"},
		"value",
		"multiply",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelNonTerminal, Index: 0}, Name: "value"},
			{Relation: trans.NodeRelation{Type: trans.RelNonTerminal, Index: 1}, Name: "value"},
		},
	)

	sdts.Bind(
		"PRODUCT", []string{"TERM", "/", "PRODUCT"},
		"value",
		"divide",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelNonTerminal, Index: 0}, Name: "value"},
			{Relation: trans.NodeRelation{Type: trans.RelNonTerminal, Index: 1}, Name: "value"},
		},
	)

	sdts.Bind(
		"PRODUCT", []string{"TERM"},
		"value",
		"identity",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)
}

func sdtsBindTCTerm(sdts trans.SDTS) {
	sdts.Bind(
		"TERM", []string{"fishtail", "EXPR", "fishhead"},
		"value",
		"identity",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "value"},
		},
	)

	sdts.Bind(
		"TERM", []string{"int"},
		"value",
		"int",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "$text"},
		},
	)

	sdts.Bind(
		"TERM", []string{"float"},
		"value",
		"float",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "$text"},
		},
	)

	sdts.Bind(
		"TERM", []string{"id"},
		"value",
		"read_var",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "$text"},
		},
	)
}
