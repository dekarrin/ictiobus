// Package simfishimathtoken contains the token classes used by the frontend
// of FISHIMath. It is in a separate package so that it can be imported and
// used by external packages while still allowing those external packages to be
// imported by the rest of the frontend.
package simfishimathtoken

/*
File automatically generated by the ictiobus compiler. DO NOT EDIT. This was
created by invoking ictiobus with the following command:

    ictcc --clr --ir []github.com/dekarrin/fishimath/fmhooks.FMValue -l FISHIMath -v 1.0 -d /home/dekarrin/projects/ictiobus/tests/09-fishimath/fmc-eval --hooks fmhooks -S all --dev -nq /home/dekarrin/projects/ictiobus/tests/09-fishimath/fm-eval.md --sim-graphs --sim-trees
*/

import (
	"github.com/dekarrin/ictiobus/lex"
)

var (
	// TCAsterisk is the token class representing a multiplication sign "*" in FISHIMath.
	TCAsterisk = lex.NewTokenClass("*", "multiplication sign \"*\"")

	// TCPlusSign is the token class representing a plus sign "+" in FISHIMath.
	TCPlusSign = lex.NewTokenClass("+", "plus sign \"+\"")

	// TC is the token class representing a minus sign "-" in FISHIMath.
	TC = lex.NewTokenClass("-", "minus sign \"-\"")

	// TCSolidus is the token class representing a division sign "/" in FISHIMath.
	TCSolidus = lex.NewTokenClass("/", "division sign \"/\"")

	// TCFishhead is the token class representing a fish-head "'}" in FISHIMath.
	TCFishhead = lex.NewTokenClass("fishhead", "fish-head \"'}\"")

	// TCFishtail is the token class representing a fish-tail ">{" in FISHIMath.
	TCFishtail = lex.NewTokenClass("fishtail", "fish-tail \">{\"")

	// TCFloat is the token class representing a floating-point literal in FISHIMath.
	TCFloat = lex.NewTokenClass("float", "floating-point literal")

	// TCId is the token class representing an identifier in FISHIMath.
	TCId = lex.NewTokenClass("id", "identifier")

	// TCInt is the token class representing an integer literal in FISHIMath.
	TCInt = lex.NewTokenClass("int", "integer literal")

	// TCShark is the token class representing a statement shark "<o^><" in FISHIMath.
	TCShark = lex.NewTokenClass("shark", "statement shark \"<o^><\"")

	// TCTentacle is the token class representing a value tentacle "=o" in FISHIMath.
	TCTentacle = lex.NewTokenClass("tentacle", "value tentacle \"=o\"")
)

var all = map[string]lex.TokenClass{
	"*":        TCAsterisk,
	"+":        TCPlusSign,
	"-":        TC,
	"/":        TCSolidus,
	"fishhead": TCFishhead,
	"fishtail": TCFishtail,
	"float":    TCFloat,
	"id":       TCId,
	"int":      TCInt,
	"shark":    TCShark,
	"tentacle": TCTentacle,
}

// ByID returns the TokenClass in FISHIMath that has the given ID. If no token
// class with that ID exists, nil is returned.
func ByID(id string) lex.TokenClass {
	return all[id]
}
