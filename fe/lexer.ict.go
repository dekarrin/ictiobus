package fe

/*
File automatically generated by the ictiobus compiler. DO NOT EDIT. This was
created by invoking ictiobus with the following command:

    ictcc fishi.md
*/

import (
	"github.com/dekarrin/ictiobus"
	"github.com/dekarrin/ictiobus/lex"
)

// Lexer creates and returns the compiled ictiobus Lexer for the language
// Unspecified.
func Lexer(lazy bool) ictiobus.Lexer {
	var lx ictiobus.Lexer
	if lazy {
		lx = ictiobus.NewLazyLexer()
	} else {
		lx = ictiobus.NewLexer()
	}

	// default state, shared by all
	lx.RegisterClass(TCEscseq, "")
	lx.RegisterClass(TCHdrTokens, "")
	lx.RegisterClass(TCHdrGrammar, "")
	lx.RegisterClass(TCHdrActions, "")

	lx.AddPattern(`%!.`, lex.LexAs(TCEscseq.ID()), "", 0)
	lx.AddPattern(`%%[Tt][Oo][Kk][Ee][Nn][Ss]`, lex.LexAndSwapState(TCHdrTokens.ID(), "TOKENS"), "", 0)
	lx.AddPattern(`%%[Gg][Rr][Aa][Mm][Mm][Aa][Rr]`, lex.LexAndSwapState(TCHdrGrammar.ID(), "GRAMMAR"), "", 0)
	lx.AddPattern(`%%[Aa][Cc][Tt][Ii][Oo][Nn][Ss]`, lex.LexAndSwapState(TCHdrActions.ID(), "ACTIONS"), "", 0)

	// ACTIONS state
	lx.RegisterClass(TCAttrRef, "ACTIONS")
	lx.RegisterClass(TCInt, "ACTIONS")
	lx.RegisterClass(TCNonterm, "ACTIONS")
	lx.RegisterClass(TCDirState, "ACTIONS")
	lx.RegisterClass(TCDirSymbol, "ACTIONS")
	lx.RegisterClass(TCDirProd, "ACTIONS")
	lx.RegisterClass(TCDirWith, "ACTIONS")
	lx.RegisterClass(TCDirHook, "ACTIONS")
	lx.RegisterClass(TCDirSet, "ACTIONS")
	lx.RegisterClass(TCDirIndex, "ACTIONS")
	lx.RegisterClass(TCId, "ACTIONS")
	lx.RegisterClass(TCEpsilon, "ACTIONS")
	lx.RegisterClass(TCTerm, "ACTIONS")

	lx.AddPattern(`\s+`, lex.Discard(), "ACTIONS", 0)
	lx.AddPattern(`(?:{(?:&|\.)(?:[0-9]+)?}|{[0-9]+}|{\^}|{[A-Za-z][^{}]*}|[\s{}]+)\.[\$A-Za-z][\$A-Za-z0-9_]*`, lex.LexAs(TCAttrRef.ID()), "ACTIONS", 0)
	lx.AddPattern(`[0-9]+`, lex.LexAs(TCInt.ID()), "ACTIONS", 0)
	lx.AddPattern(`{[A-Za-z][^}]*}`, lex.LexAs(TCNonterm.ID()), "ACTIONS", 0)
	lx.AddPattern(`%[Ss][Tt][Aa][Tt][Ee]`, lex.LexAndSwapState(TCDirState.ID(), "STATE-A"), "ACTIONS", 0)
	lx.AddPattern(`%[Ss][Yy][Mm][Bb][Oo][Ll]`, lex.LexAs(TCDirSymbol.ID()), "ACTIONS", 0)
	lx.AddPattern(`(?:->|%[Pp][Rr][Oo][Dd])`, lex.LexAs(TCDirProd.ID()), "ACTIONS", 0)
	lx.AddPattern(`(?:\(|%[Ww][Ii][Tt][Hh])`, lex.LexAs(TCDirWith.ID()), "ACTIONS", 0)
	lx.AddPattern(`(?:=|%[Hh][Oo][Oo][Kk])`, lex.LexAs(TCDirHook.ID()), "ACTIONS", 0)
	lx.AddPattern(`\)`, lex.Discard(), "ACTIONS", 0)
	lx.AddPattern(`\(\)`, lex.Discard(), "ACTIONS", 0)
	lx.AddPattern(`,`, lex.Discard(), "ACTIONS", 0)
	lx.AddPattern(`(?::|%[Ss][Ee][Tt])`, lex.LexAs(TCDirSet.ID()), "ACTIONS", 0)
	lx.AddPattern(`%[Ii][Nn][Dd][Ee][Xx]`, lex.LexAs(TCDirIndex.ID()), "ACTIONS", 0)
	lx.AddPattern(`[A-Za-z][A-Za-z0-9_-]*`, lex.LexAs(TCId.ID()), "ACTIONS", 0)
	lx.AddPattern(`{}`, lex.LexAs(TCEpsilon.ID()), "ACTIONS", 0)
	lx.AddPattern(`\S+`, lex.LexAs(TCTerm.ID()), "ACTIONS", 0)

	// GRAMMAR state
	lx.RegisterClass(TCDirState, "GRAMMAR")
	lx.RegisterClass(TCNlNonterm, "GRAMMAR")
	lx.RegisterClass(TCAlt, "GRAMMAR")
	lx.RegisterClass(TCEpsilon, "GRAMMAR")
	lx.RegisterClass(TCNonterm, "GRAMMAR")
	lx.RegisterClass(TCTerm, "GRAMMAR")
	lx.RegisterClass(TCEq, "GRAMMAR")

	lx.AddPattern(`%[Ss][Tt][Aa][Tt][Ee]`, lex.LexAndSwapState(TCDirState.ID(), "STATE-G"), "GRAMMAR", 0)
	lx.AddPattern(`[^\S\n]+`, lex.Discard(), "GRAMMAR", 0)
	lx.AddPattern(`\n\s*{[A-Za-z][^}]*}`, lex.LexAs(TCNlNonterm.ID()), "GRAMMAR", 0)
	lx.AddPattern(`\n`, lex.Discard(), "GRAMMAR", 0)
	lx.AddPattern(`\|`, lex.LexAs(TCAlt.ID()), "GRAMMAR", 0)
	lx.AddPattern(`{}`, lex.LexAs(TCEpsilon.ID()), "GRAMMAR", 0)
	lx.AddPattern(`{[A-Za-z][^}]*}`, lex.LexAs(TCNonterm.ID()), "GRAMMAR", 0)
	lx.AddPattern(`[^=\s]\S*|\S\S+`, lex.LexAs(TCTerm.ID()), "GRAMMAR", 0)
	lx.AddPattern(`=`, lex.LexAs(TCEq.ID()), "GRAMMAR", 0)

	// STATE-A state
	lx.RegisterClass(TCId, "STATE-A")

	lx.AddPattern(`\s+`, lex.Discard(), "STATE-A", 0)
	lx.AddPattern(`[A-Za-z][A-Za-z0-9_-]*`, lex.LexAndSwapState(TCId.ID(), "ACTIONS"), "STATE-A", 0)

	// STATE-G state
	lx.RegisterClass(TCId, "STATE-G")

	lx.AddPattern(`\s+`, lex.Discard(), "STATE-G", 0)
	lx.AddPattern(`[A-Za-z][A-Za-z0-9_-]*`, lex.LexAndSwapState(TCId.ID(), "GRAMMAR"), "STATE-G", 0)

	// STATE-T state
	lx.RegisterClass(TCId, "STATE-T")

	lx.AddPattern(`\s+`, lex.Discard(), "STATE-T", 0)
	lx.AddPattern(`[A-Za-z][A-Za-z0-9_-]*`, lex.LexAndSwapState(TCId.ID(), "TOKENS"), "STATE-T", 0)

	// TOKENS state
	lx.RegisterClass(TCNlEscseq, "TOKENS")
	lx.RegisterClass(TCDirState, "TOKENS")
	lx.RegisterClass(TCDirShift, "TOKENS")
	lx.RegisterClass(TCDirHuman, "TOKENS")
	lx.RegisterClass(TCDirToken, "TOKENS")
	lx.RegisterClass(TCDirDiscard, "TOKENS")
	lx.RegisterClass(TCDirPriority, "TOKENS")
	lx.RegisterClass(TCNlFreeformText, "TOKENS")
	lx.RegisterClass(TCFreeformText, "TOKENS")

	lx.AddPattern(`\n\s*%!.`, lex.LexAs(TCNlEscseq.ID()), "TOKENS", 0)
	lx.AddPattern(`%[Ss][Tt][Aa][Tt][Ee]`, lex.LexAndSwapState(TCDirState.ID(), "STATE-T"), "TOKENS", 0)
	lx.AddPattern(`%[Ss][Tt][Aa][Tt][Ee][Ss][Hh][Ii][Ff][Tt]`, lex.LexAs(TCDirShift.ID()), "TOKENS", 1)
	lx.AddPattern(`%[Hh][Uu][Mm][Aa][Nn]`, lex.LexAs(TCDirHuman.ID()), "TOKENS", 0)
	lx.AddPattern(`%[Tt][Oo][Kk][Ee][Nn]`, lex.LexAs(TCDirToken.ID()), "TOKENS", 0)
	lx.AddPattern(`%![Dd][Ii][Ss][Cc][Aa][Rr][Dd]`, lex.LexAs(TCDirDiscard.ID()), "TOKENS", 0)
	lx.AddPattern(`%[Pp][Rr][Ii][Oo][Rr][Ii][Tt][Yy]`, lex.LexAs(TCDirPriority.ID()), "TOKENS", 0)
	lx.AddPattern(`[^\S\n]+`, lex.Discard(), "TOKENS", 0)
	lx.AddPattern(`\n\s*[^%\s]+[^%\n]*`, lex.LexAs(TCNlFreeformText.ID()), "TOKENS", 0)
	lx.AddPattern(`\n`, lex.Discard(), "TOKENS", 0)
	lx.AddPattern(`[^%\s]+[^%\n]*`, lex.LexAs(TCFreeformText.ID()), "TOKENS", 0)

	return lx
}
