package fe

/*
File automatically generated by the ictiobus compiler. DO NOT EDIT. This was
created by invoking ictiobus with the following command:

    ictcc --lalr --ir github.com/dekarrin/ictiobus/fishi/syntax.AST --dest fishi/fe -l FISHI -v 1.0 --hooks fishi/syntax docs/fishi.md --dev
*/

import (
	"github.com/dekarrin/ictiobus"
	"github.com/dekarrin/ictiobus/trans"
)

// SDTS returns the generated ictiobus syntax-directed translation scheme for
// FISHI.
func SDTS() trans.SDTS {
	sdts := ictiobus.NewSDTS()

	sdtsBindTCFishispec(sdts)
	sdtsBindTCBlocks(sdts)
	sdtsBindTCBlock(sdts)
	sdtsBindTCAblock(sdts)
	sdtsBindTCTblock(sdts)
	sdtsBindTCGblock(sdts)
	sdtsBindTCTcontent(sdts)
	sdtsBindTCAcontent(sdts)
	sdtsBindTCGcontent(sdts)
	sdtsBindTCGstateSet(sdts)
	sdtsBindTCAstateSet(sdts)
	sdtsBindTCTstateSet(sdts)
	sdtsBindTCProdActionList(sdts)
	sdtsBindTCAttrRefList(sdts)
	sdtsBindTCWith(sdts)
	sdtsBindTCSemAction(sdts)
	sdtsBindTCSemActionList(sdts)
	sdtsBindTCAsym(sdts)
	sdtsBindTCAsymList(sdts)
	sdtsBindTCAproduction(sdts)
	sdtsBindTCProdAddr(sdts)
	sdtsBindTCProdSpec(sdts)
	sdtsBindTCProdAction(sdts)
	sdtsBindTCSymActions(sdts)
	sdtsBindTCSymActionsList(sdts)
	sdtsBindTCAstateSetList(sdts)
	sdtsBindTCTstateSetList(sdts)
	sdtsBindTCGstateSetList(sdts)
	sdtsBindTCGruleList(sdts)
	sdtsBindTCTentryList(sdts)
	sdtsBindTCTentry(sdts)
	sdtsBindTCGrule(sdts)
	sdtsBindTCAlternations(sdts)
	sdtsBindTCGproduction(sdts)
	sdtsBindTCGsymList(sdts)
	sdtsBindTCPriority(sdts)
	sdtsBindTCHuman(sdts)
	sdtsBindTCToken(sdts)
	sdtsBindTCStateshift(sdts)
	sdtsBindTCToption(sdts)
	sdtsBindTCToptionList(sdts)
	sdtsBindTCPattern(sdts)
	sdtsBindTCGsym(sdts)
	sdtsBindTCStateIns(sdts)
	sdtsBindTCIdExpr(sdts)
	sdtsBindTCText(sdts)
	sdtsBindTCTextElemList(sdts)
	sdtsBindTCNlTextElem(sdts)
	sdtsBindTCTextElem(sdts)

	return sdts
}

func sdtsBindTCFishispec(sdts trans.SDTS) {
	sdts.Bind(
		"FISHISPEC", []string{"BLOCKS"},
		"ast",
		"make_fishispec",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)
}

func sdtsBindTCBlocks(sdts trans.SDTS) {
	sdts.Bind(
		"BLOCKS", []string{"BLOCKS", "BLOCK"},
		"value",
		"block_list_append",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "ast"},
		},
	)

	sdts.Bind(
		"BLOCKS", []string{"BLOCK"},
		"value",
		"block_list_start",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "ast"},
		},
	)
}

func sdtsBindTCBlock(sdts trans.SDTS) {
	sdts.Bind(
		"BLOCK", []string{"GBLOCK"},
		"ast",
		"ident",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "ast"},
		},
	)

	sdts.Bind(
		"BLOCK", []string{"TBLOCK"},
		"ast",
		"ident",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "ast"},
		},
	)

	sdts.Bind(
		"BLOCK", []string{"ABLOCK"},
		"ast",
		"ident",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "ast"},
		},
	)
}

func sdtsBindTCAblock(sdts trans.SDTS) {
	sdts.Bind(
		"ABLOCK", []string{"hdr-actions", "ACONTENT"},
		"ast",
		"make_ablock",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "ast"},
		},
	)
}

func sdtsBindTCTblock(sdts trans.SDTS) {
	sdts.Bind(
		"TBLOCK", []string{"hdr-tokens", "TCONTENT"},
		"ast",
		"make_tblock",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "ast"},
		},
	)
}

func sdtsBindTCGblock(sdts trans.SDTS) {
	sdts.Bind(
		"GBLOCK", []string{"hdr-grammar", "GCONTENT"},
		"ast",
		"make_gblock",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "ast"},
		},
	)
}

func sdtsBindTCTcontent(sdts trans.SDTS) {
	sdts.Bind(
		"TCONTENT", []string{"TENTRY-LIST", "TSTATE-SET-LIST"},
		"ast",
		"tokens_content_blocks_prepend",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "value"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)

	sdts.Bind(
		"TCONTENT", []string{"TENTRY-LIST"},
		"ast",
		"tokens_content_blocks_start_entry_list",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)

	sdts.Bind(
		"TCONTENT", []string{"TSTATE-SET-LIST"},
		"ast",
		"ident",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)
}

func sdtsBindTCAcontent(sdts trans.SDTS) {
	sdts.Bind(
		"ACONTENT", []string{"SYM-ACTIONS-LIST", "ASTATE-SET-LIST"},
		"ast",
		"actions_content_blocks_prepend",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "value"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)

	sdts.Bind(
		"ACONTENT", []string{"SYM-ACTIONS-LIST"},
		"ast",
		"actions_content_blocks_start_sym_actions",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)

	sdts.Bind(
		"ACONTENT", []string{"ASTATE-SET-LIST"},
		"ast",
		"ident",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)
}

func sdtsBindTCGcontent(sdts trans.SDTS) {
	sdts.Bind(
		"GCONTENT", []string{"GRULE-LIST", "GSTATE-SET-LIST"},
		"ast",
		"grammar_content_blocks_prepend",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "value"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)

	sdts.Bind(
		"GCONTENT", []string{"GRULE-LIST"},
		"ast",
		"grammar_content_blocks_start_rule_list",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)

	sdts.Bind(
		"GCONTENT", []string{"GSTATE-SET-LIST"},
		"ast",
		"ident",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)
}

func sdtsBindTCGstateSet(sdts trans.SDTS) {
	sdts.Bind(
		"GSTATE-SET", []string{"STATE-INS", "GRULE-LIST"},
		"value",
		"make_grammar_content_node",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "state"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "value"},
		},
	)
}

func sdtsBindTCAstateSet(sdts trans.SDTS) {
	sdts.Bind(
		"ASTATE-SET", []string{"STATE-INS", "SYM-ACTIONS-LIST"},
		"value",
		"make_actions_content_node",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "state"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "value"},
		},
	)
}

func sdtsBindTCTstateSet(sdts trans.SDTS) {
	sdts.Bind(
		"TSTATE-SET", []string{"STATE-INS", "TENTRY-LIST"},
		"value",
		"make_tokens_content_node",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "state"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "value"},
		},
	)
}

func sdtsBindTCProdActionList(sdts trans.SDTS) {
	sdts.Bind(
		"PROD-ACTION-LIST", []string{"PROD-ACTION-LIST", "PROD-ACTION"},
		"value",
		"prod_action_list_append",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "value"},
		},
	)

	sdts.Bind(
		"PROD-ACTION-LIST", []string{"PROD-ACTION"},
		"value",
		"prod_action_list_start",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)
}

func sdtsBindTCAttrRefList(sdts trans.SDTS) {
	sdts.Bind(
		"ATTR-REF-LIST", []string{"ATTR-REF-LIST", "attr-ref"},
		"value",
		"attr_ref_list_append",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "$text"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "$ft"},
		},
	)

	sdts.Bind(
		"ATTR-REF-LIST", []string{"attr-ref"},
		"value",
		"attr_ref_list_start",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "$text"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "$ft"},
		},
	)
}

func sdtsBindTCWith(sdts trans.SDTS) {
	sdts.Bind(
		"WITH", []string{"dir-with", "ATTR-REF-LIST"},
		"value",
		"ident",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "value"},
		},
	)
}

func sdtsBindTCSemAction(sdts trans.SDTS) {
	sdts.Bind(
		"SEM-ACTION", []string{"dir-set", "attr-ref", "dir-hook", "id"},
		"value",
		"make_semantic_action",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "$text"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "$ft"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 3}, Name: "$text"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 3}, Name: "$ft"},
		},
	)

	sdts.Bind(
		"SEM-ACTION", []string{"dir-set", "attr-ref", "dir-hook", "id", "WITH"},
		"value",
		"make_semantic_action",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "$text"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "$ft"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 3}, Name: "$text"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 3}, Name: "$ft"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 4}, Name: "value"},
		},
	)
}

func sdtsBindTCSemActionList(sdts trans.SDTS) {
	sdts.Bind(
		"SEM-ACTION-LIST", []string{"SEM-ACTION-LIST", "SEM-ACTION"},
		"value",
		"semantic_action_list_append",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "value"},
		},
	)

	sdts.Bind(
		"SEM-ACTION-LIST", []string{"SEM-ACTION"},
		"value",
		"semantic_action_list_start",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)
}

func sdtsBindTCAsym(sdts trans.SDTS) {
	sdts.Bind(
		"ASYM", []string{"nonterm"},
		"value",
		"get_nonterminal",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "$text"},
		},
	)

	sdts.Bind(
		"ASYM", []string{"term"},
		"value",
		"get_terminal",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "$text"},
		},
	)

	sdts.Bind(
		"ASYM", []string{"int"},
		"value",
		"get_int",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "$text"},
		},
	)

	sdts.Bind(
		"ASYM", []string{"id"},
		"value",
		"ident",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "$text"},
		},
	)
}

func sdtsBindTCAsymList(sdts trans.SDTS) {
	sdts.Bind(
		"ASYM-LIST", []string{"ASYM-LIST", "ASYM"},
		"value",
		"string_list_append",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "value"},
		},
	)

	sdts.Bind(
		"ASYM-LIST", []string{"ASYM"},
		"value",
		"string_list_start",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)
}

func sdtsBindTCAproduction(sdts trans.SDTS) {
	sdts.Bind(
		"APRODUCTION", []string{"ASYM-LIST"},
		"value",
		"ident",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)

	sdts.Bind(
		"APRODUCTION", []string{"epsilon"},
		"value",
		"epsilon_string_list",
		nil,
	)
}

func sdtsBindTCProdAddr(sdts trans.SDTS) {
	sdts.Bind(
		"PROD-ADDR", []string{"dir-index", "int"},
		"value",
		"make_prod_specifier_index",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "$text"},
		},
	)

	sdts.Bind(
		"PROD-ADDR", []string{"APRODUCTION"},
		"value",
		"make_prod_specifier_literal",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)
}

func sdtsBindTCProdSpec(sdts trans.SDTS) {
	sdts.Bind(
		"PROD-SPEC", []string{"dir-prod", "PROD-ADDR"},
		"value",
		"ident",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "value"},
		},
	)

	sdts.Bind(
		"PROD-SPEC", []string{"dir-prod"},
		"value",
		"make_prod_specifier_next",
		nil,
	)
}

func sdtsBindTCProdAction(sdts trans.SDTS) {
	sdts.Bind(
		"PROD-ACTION", []string{"PROD-SPEC", "SEM-ACTION-LIST"},
		"value",
		"make_prod_action",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "value"},
		},
	)
}

func sdtsBindTCSymActions(sdts trans.SDTS) {
	sdts.Bind(
		"SYM-ACTIONS", []string{"dir-symbol", "nonterm", "PROD-ACTION-LIST"},
		"value",
		"make_symbol_actions",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "$text"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "$ft"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 2}, Name: "value"},
		},
	)
}

func sdtsBindTCSymActionsList(sdts trans.SDTS) {
	sdts.Bind(
		"SYM-ACTIONS-LIST", []string{"SYM-ACTIONS-LIST", "SYM-ACTIONS"},
		"value",
		"symbol_actions_list_append",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "value"},
		},
	)

	sdts.Bind(
		"SYM-ACTIONS-LIST", []string{"SYM-ACTIONS"},
		"value",
		"symbol_actions_list_start",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)
}

func sdtsBindTCAstateSetList(sdts trans.SDTS) {
	sdts.Bind(
		"ASTATE-SET-LIST", []string{"ASTATE-SET-LIST", "ASTATE-SET"},
		"value",
		"actions_state_block_list_append",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "value"},
		},
	)

	sdts.Bind(
		"ASTATE-SET-LIST", []string{"ASTATE-SET"},
		"value",
		"actions_state_block_list_start",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)
}

func sdtsBindTCTstateSetList(sdts trans.SDTS) {
	sdts.Bind(
		"TSTATE-SET-LIST", []string{"TSTATE-SET-LIST", "TSTATE-SET"},
		"value",
		"tokens_state_block_list_append",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "value"},
		},
	)

	sdts.Bind(
		"TSTATE-SET-LIST", []string{"TSTATE-SET"},
		"value",
		"tokens_state_block_list_start",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)
}

func sdtsBindTCGstateSetList(sdts trans.SDTS) {
	sdts.Bind(
		"GSTATE-SET-LIST", []string{"GSTATE-SET-LIST", "GSTATE-SET"},
		"value",
		"grammar_state_block_list_append",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "value"},
		},
	)

	sdts.Bind(
		"GSTATE-SET-LIST", []string{"GSTATE-SET"},
		"value",
		"grammar_state_block_list_start",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)
}

func sdtsBindTCGruleList(sdts trans.SDTS) {
	sdts.Bind(
		"GRULE-LIST", []string{"GRULE-LIST", "GRULE"},
		"value",
		"rule_list_append",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "value"},
		},
	)

	sdts.Bind(
		"GRULE-LIST", []string{"GRULE"},
		"value",
		"rule_list_start",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)
}

func sdtsBindTCTentryList(sdts trans.SDTS) {
	sdts.Bind(
		"TENTRY-LIST", []string{"TENTRY-LIST", "TENTRY"},
		"value",
		"entry_list_append",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "value"},
		},
	)

	sdts.Bind(
		"TENTRY-LIST", []string{"TENTRY"},
		"value",
		"entry_list_start",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)
}

func sdtsBindTCTentry(sdts trans.SDTS) {
	sdts.Bind(
		"TENTRY", []string{"PATTERN", "TOPTION-LIST"},
		"value",
		"make_token_entry",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "value"},
		},
	)
}

func sdtsBindTCGrule(sdts trans.SDTS) {
	sdts.Bind(
		"GRULE", []string{"nl-nonterm", "eq", "ALTERNATIONS"},
		"value",
		"make_rule",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "$text"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 2}, Name: "value"},
		},
	)
}

func sdtsBindTCAlternations(sdts trans.SDTS) {
	sdts.Bind(
		"ALTERNATIONS", []string{"GPRODUCTION"},
		"value",
		"string_list_list_start",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)

	sdts.Bind(
		"ALTERNATIONS", []string{"ALTERNATIONS", "alt", "GPRODUCTION"},
		"value",
		"string_list_list_append",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 2}, Name: "value"},
		},
	)
}

func sdtsBindTCGproduction(sdts trans.SDTS) {
	sdts.Bind(
		"GPRODUCTION", []string{"GSYM-LIST"},
		"value",
		"ident",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)

	sdts.Bind(
		"GPRODUCTION", []string{"epsilon"},
		"value",
		"epsilon_string_list",
		nil,
	)
}

func sdtsBindTCGsymList(sdts trans.SDTS) {
	sdts.Bind(
		"GSYM-LIST", []string{"GSYM-LIST", "GSYM"},
		"value",
		"string_list_append",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "value"},
		},
	)

	sdts.Bind(
		"GSYM-LIST", []string{"GSYM"},
		"value",
		"string_list_start",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)
}

func sdtsBindTCPriority(sdts trans.SDTS) {
	sdts.Bind(
		"PRIORITY", []string{"dir-priority", "TEXT"},
		"value",
		"trim_string",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "value"},
		},
	)
}

func sdtsBindTCHuman(sdts trans.SDTS) {
	sdts.Bind(
		"HUMAN", []string{"dir-human", "TEXT"},
		"value",
		"trim_string",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "value"},
		},
	)
}

func sdtsBindTCToken(sdts trans.SDTS) {
	sdts.Bind(
		"TOKEN", []string{"dir-token", "TEXT"},
		"value",
		"trim_string",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "value"},
		},
	)
}

func sdtsBindTCStateshift(sdts trans.SDTS) {
	sdts.Bind(
		"STATESHIFT", []string{"dir-shift", "TEXT"},
		"value",
		"trim_string",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "value"},
		},
	)
}

func sdtsBindTCToption(sdts trans.SDTS) {
	sdts.Bind(
		"TOPTION", []string{"DISCARD"},
		"value",
		"make_discard_option",
		nil,
	)

	sdts.Bind(
		"TOPTION", []string{"STATESHIFT"},
		"value",
		"make_stateshift_option",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)

	sdts.Bind(
		"TOPTION", []string{"TOKEN"},
		"value",
		"make_token_option",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)

	sdts.Bind(
		"TOPTION", []string{"HUMAN"},
		"value",
		"make_human_option",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)

	sdts.Bind(
		"TOPTION", []string{"PRIORITY"},
		"value",
		"make_priority_option",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)
}

func sdtsBindTCToptionList(sdts trans.SDTS) {
	sdts.Bind(
		"TOPTION-LIST", []string{"TOPTION-LIST", "TOPTION"},
		"value",
		"token_opt_list_append",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "value"},
		},
	)

	sdts.Bind(
		"TOPTION-LIST", []string{"TOPTION"},
		"value",
		"token_opt_list_start",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)
}

func sdtsBindTCPattern(sdts trans.SDTS) {
	sdts.Bind(
		"PATTERN", []string{"TEXT"},
		"value",
		"trim_string",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)
}

func sdtsBindTCGsym(sdts trans.SDTS) {
	sdts.Bind(
		"GSYM", []string{"nonterm"},
		"value",
		"get_nonterminal",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "$text"},
		},
	)

	sdts.Bind(
		"GSYM", []string{"term"},
		"value",
		"get_terminal",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "$text"},
		},
	)
}

func sdtsBindTCStateIns(sdts trans.SDTS) {
	sdts.Bind(
		"STATE-INS", []string{"dir-state", "ID-EXPR"},
		"state",
		"make_state_ins",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "value"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "$ft"},
		},
	)
}

func sdtsBindTCIdExpr(sdts trans.SDTS) {
	sdts.Bind(
		"ID-EXPR", []string{"id"},
		"value",
		"ident",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "$text"},
		},
	)

	sdts.Bind(
		"ID-EXPR", []string{"term"},
		"value",
		"ident",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "$text"},
		},
	)
}

func sdtsBindTCText(sdts trans.SDTS) {
	sdts.Bind(
		"TEXT", []string{"NL-TEXT-ELEM", "TEXT-ELEM-LIST"},
		"value",
		"append_strings_trimmed",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "value"},
		},
	)

	sdts.Bind(
		"TEXT", []string{"TEXT-ELEM-LIST"},
		"value",
		"ident",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)

	sdts.Bind(
		"TEXT", []string{"NL-TEXT-ELEM"},
		"value",
		"ident",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)
}

func sdtsBindTCTextElemList(sdts trans.SDTS) {
	sdts.Bind(
		"TEXT-ELEM-LIST", []string{"TEXT-ELEM-LIST", "TEXT-ELEM"},
		"value",
		"append_strings",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 1}, Name: "value"},
		},
	)

	sdts.Bind(
		"TEXT-ELEM-LIST", []string{"TEXT-ELEM"},
		"value",
		"ident",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "value"},
		},
	)
}

func sdtsBindTCNlTextElem(sdts trans.SDTS) {
	sdts.Bind(
		"NL-TEXT-ELEM", []string{"nl-escseq"},
		"value",
		"interpret_escape",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "$text"},
		},
	)

	sdts.Bind(
		"NL-TEXT-ELEM", []string{"nl-freeform-text"},
		"value",
		"ident",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "$text"},
		},
	)
}

func sdtsBindTCTextElem(sdts trans.SDTS) {
	sdts.Bind(
		"TEXT-ELEM", []string{"escseq"},
		"value",
		"interpret_escape",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "$text"},
		},
	)

	sdts.Bind(
		"TEXT-ELEM", []string{"freeform-text"},
		"value",
		"ident",
		[]trans.AttrRef{
			{Relation: trans.NodeRelation{Type: trans.RelSymbol, Index: 0}, Name: "$text"},
		},
	)
}
