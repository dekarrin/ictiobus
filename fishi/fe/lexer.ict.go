package fe

/*
File automatically generated by the ictiobus compiler. DO NOT EDIT. This was
created by invoking ictiobus with the following command:

    ictcc --lalr --ir github.com/dekarrin/ictiobus/fishi/syntax.AST --dest fishi/fe -l FISHI -v 1.0.0 --hooks fishi/syntax fishi.md --dev
*/

import (
	"github.com/dekarrin/ictiobus"
	"github.com/dekarrin/ictiobus/lex"

	"github.com/dekarrin/ictiobus/fishi/fe/fetoken"
)

// Lexer returns the generated ictiobus Lexer for FISHI.
func Lexer(lazy bool) ictiobus.Lexer {
	var lx ictiobus.Lexer
	if lazy {
		lx = ictiobus.NewLazyLexer()
	} else {
		lx = ictiobus.NewLexer()
	}

	// default state, shared by all
	lx.RegisterClass(fetoken.TCEscseq, "")
	lx.RegisterClass(fetoken.TCHdrTokens, "")
	lx.RegisterClass(fetoken.TCHdrGrammar, "")
	lx.RegisterClass(fetoken.TCHdrActions, "")

	lx.AddPattern(`%!.`, lex.LexAs(fetoken.TCEscseq.ID()), "", 0)
	lx.AddPattern(`%%[Tt][Oo][Kk][Ee][Nn][Ss]`, lex.LexAndSwapState(fetoken.TCHdrTokens.ID(), "TOKENS"), "", 0)
	lx.AddPattern(`%%[Gg][Rr][Aa][Mm][Mm][Aa][Rr]`, lex.LexAndSwapState(fetoken.TCHdrGrammar.ID(), "GRAMMAR"), "", 0)
	lx.AddPattern(`%%[Aa][Cc][Tt][Ii][Oo][Nn][Ss]`, lex.LexAndSwapState(fetoken.TCHdrActions.ID(), "ACTIONS"), "", 0)

	// ACTIONS state
	lx.RegisterClass(fetoken.TCAttrRef, "ACTIONS")
	lx.RegisterClass(fetoken.TCInt, "ACTIONS")
	lx.RegisterClass(fetoken.TCNonterm, "ACTIONS")
	lx.RegisterClass(fetoken.TCDirState, "ACTIONS")
	lx.RegisterClass(fetoken.TCDirSymbol, "ACTIONS")
	lx.RegisterClass(fetoken.TCDirProd, "ACTIONS")
	lx.RegisterClass(fetoken.TCDirWith, "ACTIONS")
	lx.RegisterClass(fetoken.TCDirHook, "ACTIONS")
	lx.RegisterClass(fetoken.TCDirSet, "ACTIONS")
	lx.RegisterClass(fetoken.TCDirIndex, "ACTIONS")
	lx.RegisterClass(fetoken.TCId, "ACTIONS")
	lx.RegisterClass(fetoken.TCEpsilon, "ACTIONS")
	lx.RegisterClass(fetoken.TCTerm, "ACTIONS")

	lx.AddPattern(`\s+`, lex.Discard(), "ACTIONS", 0)
	lx.AddPattern(`(?:{(?:&|\.)(?:[0-9]+)?}|{[0-9]+}|{\^}|{[A-Za-z][^{}]*}|[^\s{}]+)\.[\$A-Za-z][\$A-Za-z0-9_]*`, lex.LexAs(fetoken.TCAttrRef.ID()), "ACTIONS", 0)
	lx.AddPattern(`[0-9]+`, lex.LexAs(fetoken.TCInt.ID()), "ACTIONS", 0)
	lx.AddPattern(`{[A-Za-z][^}]*}`, lex.LexAs(fetoken.TCNonterm.ID()), "ACTIONS", 0)
	lx.AddPattern(`%[Ss][Tt][Aa][Tt][Ee]`, lex.LexAndSwapState(fetoken.TCDirState.ID(), "STATE-A"), "ACTIONS", 0)
	lx.AddPattern(`%[Ss][Yy][Mm][Bb][Oo][Ll]`, lex.LexAs(fetoken.TCDirSymbol.ID()), "ACTIONS", 0)
	lx.AddPattern(`(?:->|%[Pp][Rr][Oo][Dd])`, lex.LexAs(fetoken.TCDirProd.ID()), "ACTIONS", 0)
	lx.AddPattern(`\(\)`, lex.Discard(), "ACTIONS", 0)
	lx.AddPattern(`(?:\(|%[Ww][Ii][Tt][Hh])`, lex.LexAs(fetoken.TCDirWith.ID()), "ACTIONS", 0)
	lx.AddPattern(`(?:=|%[Hh][Oo][Oo][Kk])`, lex.LexAs(fetoken.TCDirHook.ID()), "ACTIONS", 0)
	lx.AddPattern(`\)`, lex.Discard(), "ACTIONS", 0)
	lx.AddPattern(`,`, lex.Discard(), "ACTIONS", 0)
	lx.AddPattern(`(?::|%[Ss][Ee][Tt])`, lex.LexAs(fetoken.TCDirSet.ID()), "ACTIONS", 0)
	lx.AddPattern(`%[Ii][Nn][Dd][Ee][Xx]`, lex.LexAs(fetoken.TCDirIndex.ID()), "ACTIONS", 0)
	lx.AddPattern(`[A-Za-z][A-Za-z0-9_-]*`, lex.LexAs(fetoken.TCId.ID()), "ACTIONS", 0)
	lx.AddPattern(`{}`, lex.LexAs(fetoken.TCEpsilon.ID()), "ACTIONS", 0)
	lx.AddPattern(`\S+`, lex.LexAs(fetoken.TCTerm.ID()), "ACTIONS", 0)

	// GRAMMAR state
	lx.RegisterClass(fetoken.TCDirState, "GRAMMAR")
	lx.RegisterClass(fetoken.TCNlNonterm, "GRAMMAR")
	lx.RegisterClass(fetoken.TCAlt, "GRAMMAR")
	lx.RegisterClass(fetoken.TCEpsilon, "GRAMMAR")
	lx.RegisterClass(fetoken.TCNonterm, "GRAMMAR")
	lx.RegisterClass(fetoken.TCTerm, "GRAMMAR")
	lx.RegisterClass(fetoken.TCEq, "GRAMMAR")

	lx.AddPattern(`%[Ss][Tt][Aa][Tt][Ee]`, lex.LexAndSwapState(fetoken.TCDirState.ID(), "STATE-G"), "GRAMMAR", 0)
	lx.AddPattern(`[^\S\n]+`, lex.Discard(), "GRAMMAR", 0)
	lx.AddPattern(`\n\s*{[A-Za-z][^}]*}`, lex.LexAs(fetoken.TCNlNonterm.ID()), "GRAMMAR", 0)
	lx.AddPattern(`\n`, lex.Discard(), "GRAMMAR", 0)
	lx.AddPattern(`\|`, lex.LexAs(fetoken.TCAlt.ID()), "GRAMMAR", 0)
	lx.AddPattern(`{}`, lex.LexAs(fetoken.TCEpsilon.ID()), "GRAMMAR", 0)
	lx.AddPattern(`{[A-Za-z][^}]*}`, lex.LexAs(fetoken.TCNonterm.ID()), "GRAMMAR", 0)
	lx.AddPattern(`[^=\s]\S*|\S\S+`, lex.LexAs(fetoken.TCTerm.ID()), "GRAMMAR", 0)
	lx.AddPattern(`=`, lex.LexAs(fetoken.TCEq.ID()), "GRAMMAR", 0)

	// STATE-A state
	lx.RegisterClass(fetoken.TCId, "STATE-A")

	lx.AddPattern(`\s+`, lex.Discard(), "STATE-A", 0)
	lx.AddPattern(`[A-Za-z][A-Za-z0-9_-]*`, lex.LexAndSwapState(fetoken.TCId.ID(), "ACTIONS"), "STATE-A", 0)

	// STATE-G state
	lx.RegisterClass(fetoken.TCId, "STATE-G")

	lx.AddPattern(`\s+`, lex.Discard(), "STATE-G", 0)
	lx.AddPattern(`[A-Za-z][A-Za-z0-9_-]*`, lex.LexAndSwapState(fetoken.TCId.ID(), "GRAMMAR"), "STATE-G", 0)

	// STATE-T state
	lx.RegisterClass(fetoken.TCId, "STATE-T")

	lx.AddPattern(`\s+`, lex.Discard(), "STATE-T", 0)
	lx.AddPattern(`[A-Za-z][A-Za-z0-9_-]*`, lex.LexAndSwapState(fetoken.TCId.ID(), "TOKENS"), "STATE-T", 0)

	// TOKENS state
	lx.RegisterClass(fetoken.TCNlEscseq, "TOKENS")
	lx.RegisterClass(fetoken.TCDirState, "TOKENS")
	lx.RegisterClass(fetoken.TCDirShift, "TOKENS")
	lx.RegisterClass(fetoken.TCDirHuman, "TOKENS")
	lx.RegisterClass(fetoken.TCDirToken, "TOKENS")
	lx.RegisterClass(fetoken.TCDirDiscard, "TOKENS")
	lx.RegisterClass(fetoken.TCDirPriority, "TOKENS")
	lx.RegisterClass(fetoken.TCNlFreeformText, "TOKENS")
	lx.RegisterClass(fetoken.TCFreeformText, "TOKENS")

	lx.AddPattern(`\n\s*%!.`, lex.LexAs(fetoken.TCNlEscseq.ID()), "TOKENS", 0)
	lx.AddPattern(`%[Ss][Tt][Aa][Tt][Ee]`, lex.LexAndSwapState(fetoken.TCDirState.ID(), "STATE-T"), "TOKENS", 0)
	lx.AddPattern(`%[Ss][Tt][Aa][Tt][Ee][Ss][Hh][Ii][Ff][Tt]`, lex.LexAs(fetoken.TCDirShift.ID()), "TOKENS", 1)
	lx.AddPattern(`%[Hh][Uu][Mm][Aa][Nn]`, lex.LexAs(fetoken.TCDirHuman.ID()), "TOKENS", 0)
	lx.AddPattern(`%[Tt][Oo][Kk][Ee][Nn]`, lex.LexAs(fetoken.TCDirToken.ID()), "TOKENS", 0)
	lx.AddPattern(`%[Dd][Ii][Ss][Cc][Aa][Rr][Dd]`, lex.LexAs(fetoken.TCDirDiscard.ID()), "TOKENS", 0)
	lx.AddPattern(`%[Pp][Rr][Ii][Oo][Rr][Ii][Tt][Yy]`, lex.LexAs(fetoken.TCDirPriority.ID()), "TOKENS", 0)
	lx.AddPattern(`[^\S\n]+`, lex.Discard(), "TOKENS", 0)
	lx.AddPattern(`\n\s*[^%\s]+[^%\n]*`, lex.LexAs(fetoken.TCNlFreeformText.ID()), "TOKENS", 0)
	lx.AddPattern(`\n`, lex.Discard(), "TOKENS", 0)
	lx.AddPattern(`[^%\s]+[^%\n]*`, lex.LexAs(fetoken.TCFreeformText.ID()), "TOKENS", 0)

	return lx
}
