package {{ .FrontendPackage }}

/*
File automatically generated by the ictiobus compiler. DO NOT EDIT. This was
created by invoking ictiobus with the following command:

    {{ .Command }} {{ .CommandArgs }}
*/

import (
    _ "embed"

    "github.com/dekarrin/ictiobus/grammar"
	"github.com/dekarrin/ictiobus/parse"

    "{{ .FrontendPkgImport }}/{{ .TokenPkgName }}"
)

{{$tokPkg := .TokenPkgName}}

var (
    //go:embed parser.cff
    parserData []byte
)

// Grammar returns the grammar accepted by the generated ictiobus parser for
// {{ .Lang }}. This grammar will also be included with with the parser itself,
// but it is included here as well for convenience.
func Grammar() grammar.CFG {
    g := grammar.CFG{}

{{range .Classes -}}
{{"    "}}g.AddTerm({{ $tokPkg }}.{{ .Name }}.ID(), {{ $tokPkg }}.{{ .Name }})
{{end}}
{{range .Rules}}{{/* no space removal here */}}
{{- $head := .Head}}
{{range .Productions -}}
{{"    "}}g.AddRule("{{ $head }}", []string{ {{- range .Symbols }}"{{ . }}", {{ end -}} })
{{end}}
{{- end}}
    return g
}

// Parser returns the generated ictiobus Parser for {{ .Lang }}.
func Parser() parse.Parser {
    p, err := parse.DecodeBytes(parserData)
    if err != nil {
        panic("corrupted parser.cff file: " + err.Error())
    }

    return p
}