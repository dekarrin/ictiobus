package {{ .FrontendPackage }}

/*
File automatically generated by the ictiobus compiler. DO NOT EDIT. This was
created by invoking ictiobus with the following command:

    {{ .Command }} {{ .CommandArgs }}
*/

import (
    "github.com/dekarrin/ictiobus"
    "github.com/dekarrin/ictiobus/lex"
)

// Lexer creates and returns the compiled ictiobus Lexer for the language
// {{ .Lang }}.
func Lexer(lazy bool) ictiobus.Lexer {
    var lx ictiobus.Lexer
    if lazy {
        lx = lex.NewLazyLexer()
    } else {
        lx = lex.NewLexer()
    }

{{if .Patterns.DefaultState.Entries -}}
    // default state, shared by all

    {{range .Patterns.DefaultState.Classes -}}
    lx.RegisterClass({{ .Name }}, "")
    {{- end}}

    {{range .Patterns.DefaultState.Entries -}}
    lx.AddPattern({{ .Pattern }}, {{ .Action }}, "", {{ .Priority }})
    {{- end}}
{{- end}}

{{range .Patterns.NonDefaultStates -}}
    {{$state := .State}}
    {{range .Classes -}}
    lx.RegisterClass({{ .Name }}, "{{$state}}")
    {{- end}}

    {{range .Entries -}}
    lx.AddPattern({{ .Regex }}, {{ .Action }}, "{{$state}}", {{ .Priority }})
    {{- end}}
{{- end}}

    return lx
}