package {{ .FrontendPackage }}

/*
File automatically generated by the ictiobus compiler. DO NOT EDIT. This was
created by invoking ictiobus with the following command:

    {{ .Command }} {{ .CommandArgs }}
*/

import (
    "github.com/dekarrin/ictiobus"
    "github.com/dekarrin/ictiobus/lex"

    "{{ .FrontendPkgImport }}/{{ .TokenPkgName }}"
)

{{$tokPkg := .TokenPkgName}}

// Lexer returns the generated ictiobus Lexer for {{ .Lang }}.
func Lexer(lazy bool) lex.Lexer {
    var lx lex.Lexer
    if lazy {
        lx = ictiobus.NewLazyLexer()
    } else {
        lx = ictiobus.NewLexer()
    }

{{if .Patterns.DefaultState.Entries -}}
{{"    "}}// default state, shared by all
{{range .Patterns.DefaultState.Classes -}}
{{"    "}}lx.RegisterClass({{ $tokPkg }}.{{ .Name }}, "")
{{end}}
{{range .Patterns.DefaultState.Entries -}}
{{"    "}}lx.AddPattern({{ .Regex | rquote }}, {{ .Action }}, "", {{ .Priority }})
{{end}}
{{- end -}}
{{range .Patterns.NonDefaultStates}}
{{$state := .State}}
{{"    "}}// {{ .State }} state
{{range .Classes -}}
{{"    "}}lx.RegisterClass({{ $tokPkg }}.{{ .Name }}, "{{$state}}")
{{end}}
{{range .Entries -}}
{{"    "}}lx.AddPattern({{ .Regex | rquote }}, {{ .Action }}, "{{$state}}", {{ .Priority }})
{{end}}
{{- end}}

    return lx
}